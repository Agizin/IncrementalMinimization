import java_cup.runtime.*;

class TokenVal {
  // fields
    int linenum;
    int charnum;
  // constructor
    TokenVal(int line, int ch) {
        linenum = line;
        charnum = ch;
    }
}

class IdTokenVal extends TokenVal {
  // new field: the value of the identifier
    String idVal;
  // constructor
    IdTokenVal(int line, int ch, String val) {
        super(line, ch);
    idVal = val;
    }
}

class ExpTokenVal extends TokenVal {
  // new field: the value of the string literal
    String expVal;
  // constructor
    ExpTokenVal(int line, int ch, String val) {
        super(line, ch);
        expVal = val;
    }
}

// the current token starts on its line.
class CharNum {
    static int num=1;
}
%%

DIGIT=           [0-9]
LOWERCASELETTER= [a-z]
LETTER=          [a-zA-Z]
WHITESPACE=      [\040\t]
NOTNEWLINE=      [^\n]

SLASH = 	     [/]
UNDERSCORE=      [_]
ESCAPEDCHAR=   [nt'\"?\\]
NOTNEWLINEORESCAPEDCHAR=   [^\nnt'\"?\\]
NOTNEWLINEORQUOTE= [^\n\"]
NOTNEWLINEORQUOTEORESCAPE= [^\n\"\\]
LBRACKET= [\{]
RBRACKET= [\}]

%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

%eofval{
return new Symbol(sym.EOF);
%eofval}

%line

%%



"true"		{
				Symbol S = new Symbol(sym.TRUE, new TokenVal(yyline+1, CharNum.num));
				CharNum.num +=yytext().length();
				return S;
			}


"false"		{
				Symbol S = new Symbol(sym.FALSE, new TokenVal(yyline+1, CharNum.num));
				CharNum.num +=yytext().length();
				return S;
			}
            
"always"		{
				Symbol S = new Symbol(sym.ALWAYS, new TokenVal(yyline+1, CharNum.num));
				CharNum.num +=yytext().length();
				return S;
			}
            
"implies"	{
				Symbol S = new Symbol(sym.IMPLICATION, new TokenVal(yyline+1, CharNum.num));
				CharNum.num +=yytext().length();
				return S;
			}
             
"equivalent"  {
				Symbol S = new Symbol(sym.EQUIVALENCE, new TokenVal(yyline+1, CharNum.num));
				CharNum.num +=yytext().length();
				return S;
			}
            
"until"  {
				Symbol S = new Symbol(sym.UNTIL, new TokenVal(yyline+1, CharNum.num));
				CharNum.num +=yytext().length();
				return S;
			}
            
{LOWERCASELETTER}({LETTER}|{DIGIT}|{UNDERSCORE})* {
            Symbol S = new Symbol(sym.ID, 
                             new IdTokenVal(yyline+1, CharNum.num, yytext()));
            CharNum.num += yytext().length();
            return S;
          } 

"/\\"  { Symbol S = new Symbol(sym.AND, new TokenVal(yyline+1, CharNum.num));
            CharNum.num+=2;
            return S;
          }
          
"\\/"      { Symbol S = new Symbol(sym.OR, new TokenVal(yyline+1, CharNum.num));
            CharNum.num+=2;
            return S;
          }
          

          
          
\"({NOTNEWLINEORQUOTEORESCAPE}|\\{ESCAPEDCHAR})*\" {
            String expVal = yytext();
            Symbol S = new Symbol(sym.EXP,
                             new ExpTokenVal(yyline+1, CharNum.num, expVal));
            CharNum.num += yytext().length();
            return S;
          }
          
\"({NOTNEWLINEORQUOTEORESCAPE}|\\{ESCAPEDCHAR})* {
            // unterminated expression
            ErrMsg.fatal(yyline+1, CharNum.num,
                         "unterminated embedded expression ignored");
          }
          
\"({NOTNEWLINEORQUOTEORESCAPE}|\\{ESCAPEDCHAR})*\\{NOTNEWLINEORESCAPEDCHAR}({NOTNEWLINEORQUOTE})*\" {
            // bad escape character
            ErrMsg.fatal(yyline+1, CharNum.num,
                         "embedded expression with bad escaped character ignored");
            CharNum.num += yytext().length();
          }
          
\"({NOTNEWLINEORQUOTEORESCAPE}|\\{ESCAPEDCHAR})*(\\{NOTNEWLINEORESCAPEDCHAR})?({NOTNEWLINEORQUOTEORESCAPE}|\\{ESCAPEDCHAR})*\\? {
            // bad escape character
            ErrMsg.fatal(yyline+1, CharNum.num,
             "unterminated embedded expression with bad escaped character ignored");
          }
          
          
          
{LBRACKET}({NOTNEWLINEORQUOTEORESCAPE}|\\{ESCAPEDCHAR})*{RBRACKET} {
            String expVal = yytext();
            Symbol S = new Symbol(sym.EXP,
                             new ExpTokenVal(yyline+1, CharNum.num, expVal));
            CharNum.num += yytext().length();
            return S;
          }
          
{LBRACKET}({NOTNEWLINEORQUOTEORESCAPE}|\\{ESCAPEDCHAR})* {
            // unterminated expression
            ErrMsg.fatal(yyline+1, CharNum.num,
                         "unterminated embedded expression ignored");
          }
          
{LBRACKET}({NOTNEWLINEORQUOTEORESCAPE}|\\{ESCAPEDCHAR})*\\{NOTNEWLINEORESCAPEDCHAR}({NOTNEWLINEORQUOTE})*\" {
            // bad escape character
            ErrMsg.fatal(yyline+1, CharNum.num,
                         "embedded expression with bad escaped character ignored");
            CharNum.num += yytext().length();
          }
          
{LBRACKET}({NOTNEWLINEORQUOTEORESCAPE}|\\{ESCAPEDCHAR})*(\\{NOTNEWLINEORESCAPEDCHAR})?({NOTNEWLINEORQUOTEORESCAPE}|\\{ESCAPEDCHAR})*\\? {
            // bad escape character
            ErrMsg.fatal(yyline+1, CharNum.num,
             "unterminated embedded expression with bad escaped character ignored");
          }           


                    
                       
\n        { CharNum.num = 1; }

{WHITESPACE}+  { CharNum.num += yytext().length(); }                       

"U"       { Symbol S = new Symbol(sym.UNTIL, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

"W"       { Symbol S = new Symbol(sym.WEAKUNTIL, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

"V"       { Symbol S = new Symbol(sym.DUAL, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }
 
"R"       { Symbol S = new Symbol(sym.RELEASE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }
          
"M"       { Symbol S = new Symbol(sym.STRONGRELEASE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }          
          
"X"       { Symbol S = new Symbol(sym.NEXT, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }          
          
"G"       { Symbol S = new Symbol(sym.ALWAYS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

"[]"       { Symbol S = new Symbol(sym.ALWAYS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num+=2;
            return S;
          }

"F"       { Symbol S = new Symbol(sym.EVENTUALLY, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

"("       { Symbol S = new Symbol(sym.LPAREN, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

")"       { Symbol S = new Symbol(sym.RPAREN, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }           
          
"<>"       { Symbol S = new Symbol(sym.EVENTUALLY, new TokenVal(yyline+1, CharNum.num));
            CharNum.num+=2;
            return S;
          }                    
          
"!"       { Symbol S = new Symbol(sym.NEGATION, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }                                       
          
"&&"      { Symbol S = new Symbol(sym.AND, new TokenVal(yyline+1, CharNum.num));
            CharNum.num+=2;
            return S;
          }

"&"      { Symbol S = new Symbol(sym.AND, new TokenVal(yyline+1, CharNum.num));
            CharNum.num+=2;
            return S;
          }

"*"      { Symbol S = new Symbol(sym.AND, new TokenVal(yyline+1, CharNum.num));
            CharNum.num+=2;
            return S;
          }          
          
         
"||"      { Symbol S = new Symbol(sym.OR, new TokenVal(yyline+1, CharNum.num));
            CharNum.num+=2;
            return S;
          }

"|"      { Symbol S = new Symbol(sym.OR, new TokenVal(yyline+1, CharNum.num));
            CharNum.num+=2;
            return S;
          }         
 
 "+"      { Symbol S = new Symbol(sym.OR, new TokenVal(yyline+1, CharNum.num));
            CharNum.num+=2;
            return S;
          }
          
"^"      { Symbol S = new Symbol(sym.XOR, new TokenVal(yyline+1, CharNum.num));
            CharNum.num+=2;
            return S;
          }          
 

"->"      { Symbol S = new Symbol(sym.IMPLICATION, new TokenVal(yyline+1, CharNum.num));
            CharNum.num+=2;
            return S;
          }

"<->"      { Symbol S = new Symbol(sym.EQUIVALENCE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num+=3;
            return S;
          }
          
                                              
          
.         { ErrMsg.fatal(yyline+1, CharNum.num,
                         "illegal character ignored: " + yytext());
            CharNum.num++;
          }          