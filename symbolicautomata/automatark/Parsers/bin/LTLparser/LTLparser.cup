

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};

/* Terminals */

terminal TokenVal       TRUE;
terminal TokenVal       FALSE;
terminal IdTokenVal     ID;
terminal ExpTokenVal    EXP;
terminal                UNTIL;
terminal                WEAKUNTIL;
terminal                RELEASE;
terminal                STRONGRELEASE;
terminal                IMPLICATION;
terminal                EQUIVALENCE;
terminal                AND;
terminal                OR;
terminal                XOR;
terminal                NEXT;
terminal                ALWAYS;
terminal                EVENTUALLY;
terminal                NEGATION;
terminal                LPAREN;
terminal                RPAREN;

/* Nonterminals */

non terminal LTLListNode program;
non terminal LinkedList ltlList;
non terminal LTLNode ltl;
non terminal LTLNode opd;

/* precedence and associativity declarations */
precedence right IMPLICATION, EQUIVALENCE;
precedence left XOR;
precedence left OR;
precedence left AND;
precedence right UNTIL, WEAKUNTIL, RELEASE, STRONGRELEASE;
precedence right ALWAYS, EVENTUALLY;
precedence right NEXT;
precedence right NEGATION;

start with program;


/* Grammar with actions */

program ::= ltlList: l
        {: RESULT = new LTLListNode(l);
        :}
        ;

ltlList ::= ltlList:lList ltl: l
        {: lList.addLast(l);
           RESULT = lList;
        :}
        | /* epsilon */
        {: RESULT = new LinkedList<LTLNode>(); 
        :}
        ;

ltl ::= ltl: l1 AND ltl: l2
    {: RESULT = new AndNode(l1,l2);
    :}
    | ltl:l1 OR ltl:l2
    {: RESULT = new OrNode(l1,l2);
    :}
    | ltl:l1 XOR ltl:l2
    {: RESULT = new XorNode(l1,l2);
    :}
    | ltl:l1 IMPLICATION ltl:l2
    {: RESULT = new ImplicationNode(l1,l2);
    :}
    | ltl:l1 EQUIVALENCE ltl:l2
    {: RESULT = new EquivalenceNode(l1,l2);
    :}
    | ltl:l1 UNTIL ltl:l2
    {: RESULT = new UntilNode(l1,l2);
    :}
    | ltl:l1 WEAKUNTIL ltl:l2
    {: RESULT = new WeakUntilNode(l1,l2);
    :}
    | ltl:l1 RELEASE ltl:l2
    {: RESULT = new ReleaseNode(l1,l2);
    :}
    | ltl:l1 STRONGRELEASE ltl:l2
    {: RESULT = new StrongReleaseNode(l1,l2);
    :}
    | NEXT ltl:l1
    {: RESULT = new NextNode(l1);
    :}
    | ALWAYS ltl:l1
    {: RESULT = new AlwaysNode(l1);
    :}
    | EVENTUALLY ltl:l1
    {: RESULT = new EventuallyNode(l1);
    :}
    | NEGATION ltl:l1
    {: RESULT = new NegationNode(l1);
    :}
    | opd:op
    {: RESULT = op; 
    :}
    ;

opd ::= TRUE:t
    {: RESULT = new TrueNode(t.linenum, t.charnum);
    :}
    | FALSE:f
    {: RESULT = new FalseNode(f.linenum, f.charnum);
    :}
    | ID:i
    {: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
    :}
    | LPAREN ltl:l1 RPAREN
    {: RESULT = l1;
    :}
    | EXP:e
    {: RESULT = new ExpNode(e.linenum, e.charnum, e.expVal);
    :}
    ;

